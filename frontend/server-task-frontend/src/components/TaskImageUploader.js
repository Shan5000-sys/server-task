"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const TaskImageUploader = () => {
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const [preview, setPreview] = (0, react_1.useState)(null);
    const [labels, setLabels] = (0, react_1.useState)([]);
    const [message, setMessage] = (0, react_1.useState)(null);
    const handleFileChange = (e) => {
        const file = e.target.files?.[0];
        if (file) {
            setSelectedFile(file);
            setPreview(URL.createObjectURL(file));
            setLabels([]);
            setMessage(null);
        }
    };
    const uploadImage = async () => {
        if (!selectedFile)
            return;
        try {
            // Get pre-signed URL
            const res = await fetch('https://u4e7e45gee.execute-api.ca-central-1.amazonaws.com/prod', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ fileName: selectedFile.name, fileType: selectedFile.type }),
            });
            const { uploadUrl, key } = await res.json();
            // Upload to S3
            await fetch(uploadUrl, {
                method: 'PUT',
                headers: { 'Content-Type': selectedFile.type },
                body: selectedFile,
            });
            // Analyze image
            const rekRes = await fetch('https://your-api-id.execute-api.ca-central-1.amazonaws.com/prod/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ s3Key: key }),
            });
            const data = await rekRes.json();
            setLabels(data.labels.map((label) => label.Name));
            setMessage('✅ Image analyzed successfully!');
        }
        catch (err) {
            console.error(err);
            setMessage(`❌ Error: ${err.message}`);
        }
    };
    return (<div className="space-y-4 mt-6">
      <input type="file" accept="image/*" onChange={handleFileChange}/>
      {preview && <img src={preview} alt="Preview" className="w-48 rounded shadow"/>}
      <button onClick={uploadImage} disabled={!selectedFile} className="bg-green-600 text-white px-4 py-2 rounded">
        Upload & Analyze
      </button>
      {message && <p className="text-sm">{message}</p>}
      {labels.length > 0 && (<ul className="list-disc ml-6 text-sm">
          {labels.map(label => <li key={label}>{label}</li>)}
        </ul>)}
    </div>);
};
exports.default = TaskImageUploader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0ltYWdlVXBsb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUYXNrSW1hZ2VVcGxvYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBd0M7QUFFeEMsTUFBTSxpQkFBaUIsR0FBYSxHQUFHLEVBQUU7SUFDdkMsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWMsSUFBSSxDQUFDLENBQUM7SUFDcEUsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWdCLElBQUksQ0FBQyxDQUFDO0lBQzVELE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFnQixJQUFJLENBQUMsQ0FBQztJQUU1RCxNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBc0MsRUFBRSxFQUFFO1FBQ2xFLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxJQUFJLEVBQUU7WUFDUixlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0QyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDZCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDLENBQUM7SUFFRixNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksRUFBRTtRQUM3QixJQUFJLENBQUMsWUFBWTtZQUFFLE9BQU87UUFFMUIsSUFBSTtZQUNGLHFCQUFxQjtZQUNyQixNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRTtnQkFDeEYsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO2dCQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDbkYsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUU1QyxlQUFlO1lBQ2YsTUFBTSxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUNyQixNQUFNLEVBQUUsS0FBSztnQkFDYixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsWUFBWSxDQUFDLElBQUksRUFBRTtnQkFDOUMsSUFBSSxFQUFFLFlBQVk7YUFDbkIsQ0FBQyxDQUFDO1lBRUgsZ0JBQWdCO1lBQ2hCLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLHlFQUF5RSxFQUFFO2dCQUNwRyxNQUFNLEVBQUUsTUFBTTtnQkFDZCxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2FBQ3JDLENBQUMsQ0FBQztZQUVILE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdkQsVUFBVSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDOUM7UUFBQyxPQUFPLEdBQVEsRUFBRTtZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLFVBQVUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FDN0I7TUFBQSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFDL0Q7TUFBQSxDQUFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRyxDQUMvRTtNQUFBLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLDJDQUEyQyxDQUMxRzs7TUFDRixFQUFFLE1BQU0sQ0FDUjtNQUFBLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDaEQ7TUFBQSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ3BCLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FDcEM7VUFBQSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ3BEO1FBQUEsRUFBRSxFQUFFLENBQUMsQ0FDTixDQUNIO0lBQUEsRUFBRSxHQUFHLENBQUMsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsa0JBQWUsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IFRhc2tJbWFnZVVwbG9hZGVyOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgW3NlbGVjdGVkRmlsZSwgc2V0U2VsZWN0ZWRGaWxlXSA9IHVzZVN0YXRlPEZpbGUgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3ByZXZpZXcsIHNldFByZXZpZXddID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtsYWJlbHMsIHNldExhYmVsc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBoYW5kbGVGaWxlQ2hhbmdlID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0LmZpbGVzPy5bMF07XG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIHNldFNlbGVjdGVkRmlsZShmaWxlKTtcbiAgICAgIHNldFByZXZpZXcoVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSk7XG4gICAgICBzZXRMYWJlbHMoW10pO1xuICAgICAgc2V0TWVzc2FnZShudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdXBsb2FkSW1hZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZEZpbGUpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgcHJlLXNpZ25lZCBVUkxcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL3U0ZTdlNDVnZWUuZXhlY3V0ZS1hcGkuY2EtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20vcHJvZCcsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGZpbGVOYW1lOiBzZWxlY3RlZEZpbGUubmFtZSwgZmlsZVR5cGU6IHNlbGVjdGVkRmlsZS50eXBlIH0pLFxuICAgICAgfSk7XG4gICAgICBjb25zdCB7IHVwbG9hZFVybCwga2V5IH0gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAvLyBVcGxvYWQgdG8gUzNcbiAgICAgIGF3YWl0IGZldGNoKHVwbG9hZFVybCwge1xuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiBzZWxlY3RlZEZpbGUudHlwZSB9LFxuICAgICAgICBib2R5OiBzZWxlY3RlZEZpbGUsXG4gICAgICB9KTtcblxuICAgICAgLy8gQW5hbHl6ZSBpbWFnZVxuICAgICAgY29uc3QgcmVrUmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8veW91ci1hcGktaWQuZXhlY3V0ZS1hcGkuY2EtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20vcHJvZC9hbmFseXplJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgczNLZXk6IGtleSB9KSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVrUmVzLmpzb24oKTtcbiAgICAgIHNldExhYmVscyhkYXRhLmxhYmVscy5tYXAoKGxhYmVsOiBhbnkpID0+IGxhYmVsLk5hbWUpKTtcbiAgICAgIHNldE1lc3NhZ2UoJ+KchSBJbWFnZSBhbmFseXplZCBzdWNjZXNzZnVsbHkhJyk7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIHNldE1lc3NhZ2UoYOKdjCBFcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNCBtdC02XCI+XG4gICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBhY2NlcHQ9XCJpbWFnZS8qXCIgb25DaGFuZ2U9e2hhbmRsZUZpbGVDaGFuZ2V9IC8+XG4gICAgICB7cHJldmlldyAmJiA8aW1nIHNyYz17cHJldmlld30gYWx0PVwiUHJldmlld1wiIGNsYXNzTmFtZT1cInctNDggcm91bmRlZCBzaGFkb3dcIiAvPn1cbiAgICAgIDxidXR0b24gb25DbGljaz17dXBsb2FkSW1hZ2V9IGRpc2FibGVkPXshc2VsZWN0ZWRGaWxlfSBjbGFzc05hbWU9XCJiZy1ncmVlbi02MDAgdGV4dC13aGl0ZSBweC00IHB5LTIgcm91bmRlZFwiPlxuICAgICAgICBVcGxvYWQgJiBBbmFseXplXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIHttZXNzYWdlICYmIDxwIGNsYXNzTmFtZT1cInRleHQtc21cIj57bWVzc2FnZX08L3A+fVxuICAgICAge2xhYmVscy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZGlzYyBtbC02IHRleHQtc21cIj5cbiAgICAgICAgICB7bGFiZWxzLm1hcChsYWJlbCA9PiA8bGkga2V5PXtsYWJlbH0+e2xhYmVsfTwvbGk+KX1cbiAgICAgICAgPC91bD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYXNrSW1hZ2VVcGxvYWRlcjsiXX0=