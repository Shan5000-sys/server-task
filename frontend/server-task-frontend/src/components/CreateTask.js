"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const CreateTask = () => {
    const [formData, setFormData] = (0, react_1.useState)({
        taskId: '',
        userId: '',
        title: '',
        description: ''
    });
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [message, setMessage] = (0, react_1.useState)(null);
    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };
    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setMessage(null);
        try {
            const res = await fetch('https://u4e7e45gee.execute-api.ca-central-1.amazonaws.com/prod/tasks', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            if (!res.ok)
                throw new Error('Failed to create task');
            setMessage('✅ Task created!');
            setFormData({ taskId: '', userId: '', title: '', description: '' });
        }
        catch (err) {
            setMessage(`❌ ${err.message}`);
        }
        finally {
            setLoading(false);
        }
    };
    return (<form onSubmit={handleSubmit} className="space-y-4 bg-white p-4 shadow rounded">
      <input name="taskId" placeholder="Task ID" onChange={handleChange} value={formData.taskId} required className="border p-2 w-full"/>
      <input name="userId" placeholder="User ID" onChange={handleChange} value={formData.userId} required className="border p-2 w-full"/>
      <input name="title" placeholder="Title" onChange={handleChange} value={formData.title} required className="border p-2 w-full"/>
      <textarea name="description" placeholder="Description" onChange={handleChange} value={formData.description} className="border p-2 w-full"/>
      <button type="submit" disabled={loading} className="bg-blue-500 text-white px-4 py-2 rounded">
        {loading ? 'Saving...' : 'Create Task'}
      </button>
      {message && <p className="text-sm mt-2">{message}</p>}
    </form>);
};
exports.default = CreateTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlVGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNyZWF0ZVRhc2sudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQXdDO0FBRXhDLE1BQU0sVUFBVSxHQUFhLEdBQUcsRUFBRTtJQUNoQyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQztRQUN2QyxNQUFNLEVBQUUsRUFBRTtRQUNWLE1BQU0sRUFBRSxFQUFFO1FBQ1YsS0FBSyxFQUFFLEVBQUU7UUFDVCxXQUFXLEVBQUUsRUFBRTtLQUNoQixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBZ0IsSUFBSSxDQUFDLENBQUM7SUFFNUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUE0RCxFQUFFLEVBQUU7UUFDcEYsV0FBVyxDQUFDLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRixNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsQ0FBa0IsRUFBRSxFQUFFO1FBQ2hELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpCLElBQUk7WUFDRixNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxzRUFBc0UsRUFBRTtnQkFDOUYsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO2dCQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7YUFDL0IsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUN0RCxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM5QixXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNyRTtRQUFDLE9BQU8sR0FBUSxFQUFFO1lBQ2pCLFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ2hDO2dCQUFTO1lBQ1IsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTyxDQUNMLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQyx1Q0FBdUMsQ0FDN0U7TUFBQSxDQUFDLEtBQUssQ0FDSixJQUFJLENBQUMsUUFBUSxDQUNiLFdBQVcsQ0FBQyxTQUFTLENBQ3JCLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUN2QixLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQ3ZCLFFBQVEsQ0FDUixTQUFTLENBQUMsbUJBQW1CLEVBRS9CO01BQUEsQ0FBQyxLQUFLLENBQ0osSUFBSSxDQUFDLFFBQVEsQ0FDYixXQUFXLENBQUMsU0FBUyxDQUNyQixRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FDdkIsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUN2QixRQUFRLENBQ1IsU0FBUyxDQUFDLG1CQUFtQixFQUUvQjtNQUFBLENBQUMsS0FBSyxDQUNKLElBQUksQ0FBQyxPQUFPLENBQ1osV0FBVyxDQUFDLE9BQU8sQ0FDbkIsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQ3ZCLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FDdEIsUUFBUSxDQUNSLFNBQVMsQ0FBQyxtQkFBbUIsRUFFL0I7TUFBQSxDQUFDLFFBQVEsQ0FDUCxJQUFJLENBQUMsYUFBYSxDQUNsQixXQUFXLENBQUMsYUFBYSxDQUN6QixRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FDdkIsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUM1QixTQUFTLENBQUMsbUJBQW1CLEVBRS9CO01BQUEsQ0FBQyxNQUFNLENBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FDYixRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDbEIsU0FBUyxDQUFDLDBDQUEwQyxDQUVwRDtRQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FDeEM7TUFBQSxFQUFFLE1BQU0sQ0FDUjtNQUFBLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDdkQ7SUFBQSxFQUFFLElBQUksQ0FBQyxDQUNSLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IENyZWF0ZVRhc2s6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBbZm9ybURhdGEsIHNldEZvcm1EYXRhXSA9IHVzZVN0YXRlKHtcbiAgICB0YXNrSWQ6ICcnLFxuICAgIHVzZXJJZDogJycsXG4gICAgdGl0bGU6ICcnLFxuICAgIGRlc2NyaXB0aW9uOiAnJ1xuICB9KTtcblxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudD4pID0+IHtcbiAgICBzZXRGb3JtRGF0YSh7IC4uLmZvcm1EYXRhLCBbZS50YXJnZXQubmFtZV06IGUudGFyZ2V0LnZhbHVlIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IGFzeW5jIChlOiBSZWFjdC5Gb3JtRXZlbnQpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICBzZXRNZXNzYWdlKG51bGwpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL3U0ZTdlNDVnZWUuZXhlY3V0ZS1hcGkuY2EtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20vcHJvZC90YXNrcycsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHRhc2snKTtcbiAgICAgIHNldE1lc3NhZ2UoJ+KchSBUYXNrIGNyZWF0ZWQhJyk7XG4gICAgICBzZXRGb3JtRGF0YSh7IHRhc2tJZDogJycsIHVzZXJJZDogJycsIHRpdGxlOiAnJywgZGVzY3JpcHRpb246ICcnIH0pO1xuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICBzZXRNZXNzYWdlKGDinYwgJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0gY2xhc3NOYW1lPVwic3BhY2UteS00IGJnLXdoaXRlIHAtNCBzaGFkb3cgcm91bmRlZFwiPlxuICAgICAgPGlucHV0XG4gICAgICAgIG5hbWU9XCJ0YXNrSWRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIlRhc2sgSURcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICB2YWx1ZT17Zm9ybURhdGEudGFza0lkfVxuICAgICAgICByZXF1aXJlZFxuICAgICAgICBjbGFzc05hbWU9XCJib3JkZXIgcC0yIHctZnVsbFwiXG4gICAgICAvPlxuICAgICAgPGlucHV0XG4gICAgICAgIG5hbWU9XCJ1c2VySWRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIlVzZXIgSURcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICB2YWx1ZT17Zm9ybURhdGEudXNlcklkfVxuICAgICAgICByZXF1aXJlZFxuICAgICAgICBjbGFzc05hbWU9XCJib3JkZXIgcC0yIHctZnVsbFwiXG4gICAgICAvPlxuICAgICAgPGlucHV0XG4gICAgICAgIG5hbWU9XCJ0aXRsZVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiVGl0bGVcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICB2YWx1ZT17Zm9ybURhdGEudGl0bGV9XG4gICAgICAgIHJlcXVpcmVkXG4gICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBwLTIgdy1mdWxsXCJcbiAgICAgIC8+XG4gICAgICA8dGV4dGFyZWFcbiAgICAgICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJEZXNjcmlwdGlvblwiXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgIHZhbHVlPXtmb3JtRGF0YS5kZXNjcmlwdGlvbn1cbiAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyIHAtMiB3LWZ1bGxcIlxuICAgICAgLz5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgIGRpc2FibGVkPXtsb2FkaW5nfVxuICAgICAgICBjbGFzc05hbWU9XCJiZy1ibHVlLTUwMCB0ZXh0LXdoaXRlIHB4LTQgcHktMiByb3VuZGVkXCJcbiAgICAgID5cbiAgICAgICAge2xvYWRpbmcgPyAnU2F2aW5nLi4uJyA6ICdDcmVhdGUgVGFzayd9XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIHttZXNzYWdlICYmIDxwIGNsYXNzTmFtZT1cInRleHQtc20gbXQtMlwiPnttZXNzYWdlfTwvcD59XG4gICAgPC9mb3JtPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRlVGFzazsiXX0=